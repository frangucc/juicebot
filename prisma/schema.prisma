// Trading SMS Assistant - Prisma Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  phone          String   @unique @db.VarChar(20)
  timezone       String   @default("America/New_York") @db.VarChar(50)
  riskTolerance  String   @default("moderate") @map("risk_tolerance") @db.VarChar(20)
  capital        Decimal? @db.Decimal(12, 2)
  active         Boolean  @default(true)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  trades      Trade[]
  smsMessages SmsMessage[]

  @@map("users")
}

model ScreenerAlert {
  id           String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  symbol       String   @db.VarChar(10)
  alertType    String   @map("alert_type") @db.VarChar(50)
  triggerPrice Decimal  @map("trigger_price") @db.Decimal(12, 4)
  triggerTime  DateTime @map("trigger_time") @db.Timestamptz(6)
  conditions   Json?    @db.JsonB
  metadata     Json?    @db.JsonB
  sentToUsers  String[] @map("sent_to_users") @db.Uuid
  active       Boolean  @default(true)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  trades Trade[]

  @@index([symbol])
  @@index([triggerTime(sort: Desc)])
  @@index([active], map: "idx_screener_alerts_active")
  @@map("screener_alerts")
}

model Trade {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId         String    @map("user_id") @db.Uuid
  alertId        String?   @map("alert_id") @db.Uuid
  symbol         String    @db.VarChar(10)
  entryPrice     Decimal?  @map("entry_price") @db.Decimal(12, 4)
  entryTime      DateTime? @map("entry_time") @db.Timestamptz(6)
  entryConfirmed Boolean   @default(false) @map("entry_confirmed")
  shares         Int?
  stopLoss       Decimal?  @map("stop_loss") @db.Decimal(12, 4)
  takeProfit     Decimal?  @map("take_profit") @db.Decimal(12, 4)
  exitPrice      Decimal?  @map("exit_price") @db.Decimal(12, 4)
  exitTime       DateTime? @map("exit_time") @db.Timestamptz(6)
  exitReason     String?   @map("exit_reason") @db.VarChar(50)
  pnl            Decimal?  @db.Decimal(12, 2)
  pnlPercent     Decimal?  @map("pnl_percent") @db.Decimal(8, 4)
  status         String    @default("pending") @db.VarChar(20)
  barsData       Json?     @map("bars_data") @db.JsonB
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  alert  ScreenerAlert? @relation(fields: [alertId], references: [id])

  @@index([userId])
  @@index([symbol])
  @@index([status])
  @@index([entryTime(sort: Desc)])
  @@map("trades")
}

model SmsMessage {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId     String   @map("user_id") @db.Uuid
  tradeId    String?  @map("trade_id") @db.Uuid
  direction  String   @db.VarChar(10)
  body       String   @db.Text
  parsedData Json?    @map("parsed_data") @db.JsonB
  twilioSid  String?  @map("twilio_sid") @db.VarChar(100)
  status     String   @default("pending") @db.VarChar(20)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt(sort: Desc)])
  @@map("sms_messages")
}

model MarketDataCache {
  symbol      String   @id @db.VarChar(10)
  timeframe   String   @db.VarChar(10)
  bars        Json     @db.JsonB
  indicators  Json?    @db.JsonB
  lastUpdated DateTime @default(now()) @map("last_updated") @db.Timestamptz(6)

  @@index([lastUpdated(sort: Desc)])
  @@map("market_data_cache")
}

model ScreenerPerformance {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  timestamp       DateTime @default(now()) @db.Timestamptz(6)
  symbolsScanned  Int      @map("symbols_scanned")
  alertsGenerated Int      @map("alerts_generated")
  latencyMs       Int      @map("latency_ms")
  errors          Int      @default(0)
  metadata        Json?    @db.JsonB

  @@index([timestamp(sort: Desc)])
  @@map("screener_performance")
}
